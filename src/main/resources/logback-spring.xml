<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="false" scanPeriod="10 seconds">

	<property name="logPath" value="${LOG_PATH:-.}"/>
	<property name="logRoot" value="wave-logs"/>
	<property name="logModule" value="file"/>
	<!-- 读取spring.application.name中的属性来生成日志文件名 -->
	<!-- <springProperty scope="context" name="logPath" source="logging.path" defaultValue="/iproject"/> -->
	<!--读取配置中心的属性-->
	<!-- <springProperty scope="context" name="mongo.host" source="spring.data.mongodb.host"/>
	<springProperty scope="context" name="mongo.port" source="spring.data.mongodb.port"/>
	<springProperty scope="context" name="mongo.database" source="spring.data.mongodb.database"/> -->

    <!-- scan:
     当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。（这个功能可以在不重启运行环境下，调整打印日志的细节，方便定位问题）
     scanPeriod:
     设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
     debug:
     当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。

     Logger 可以被分配级别。级别包括：TRACE、DEBUG、INFO、WARN 和 ERROR

     级别排序为： TRACE < DEBUG < INFO < WARN < ERROR
    -->
    
    <!--<logger name="org.apache.activemq" level="INFO" />-->
    <!--<logger name="org.apache.zookeeper" level="INFO" />-->
    <!--com.alibaba.dubbo是dubbo服务的包，在如何是info一下的级别会产生大量的启动日志，调成WARN减少日志输出-->
    <!--<logger name="com.alibaba.dubbo" level="WARN" />-->
    <!--com.anjbo.dao是本项目的dao层的包，把这个包的打印日志级别调成 DEBUG级别可以看到sql执行-->
    <logger name="top.itweek.wavefile.persistence.mapper" level="DEBUG" />

    <!--文件输出内容的格式设置 -->
    <appender name="FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志日常打印文件 -->
        <!-- <file>/data/logs/coupon/coupon.log</file> -->
        <file>${logPath}/${logRoot}/${logModule}/${logModule}.log</file>
        <!-- 配置日志所生成的目录以及生成文件名的规则 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- <fileNamePattern>/data/logs/coupon/server-eureka-%d{yyyy-MM-dd}.%i.log</fileNamePattern> -->
            <!-- 按天分文件夹存放 ，并压缩 -->
            <fileNamePattern>${logPath}/${logRoot}/${logModule}/%d{yyyy-MM-dd}/%i.log </fileNamePattern>
            <!-- 保留最近60天的日志，以防止日志填满整个磁盘空间-->
            <maxHistory>360</maxHistory>
            <!-- 用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志-->
            <totalSizeCap>10GB</totalSizeCap>
            <!-- 最大100MB 超过最大值，会重新建一个文件-->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <pattern>
                %date{yyyy-MM-dd HH:mm:ss.SSS} [%-5level][%thread] %logger{40}:%line - %msg%n
            </pattern>
            <!-- 此处设置字符集，防止中文乱码 -->
            <charset>UTF-8</charset>
        </encoder>

        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!--<prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。-->
        <!--设置为true不能压缩  -->
        <prudent>false</prudent>
    </appender>

    <!--控制台输出的格式设置 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 控制台输出的日志 的格式 -->
        <withJansi>true</withJansi>
        <encoder>
            <pattern>
                %date{yyyy-MM-dd HH:mm:ss.SSS} [%-5level][%thread] %logger{40}:%line - %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 只是DEBUG级别以上的日志才显示 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <!--root：
    	也是<loger>元素，但是它是根loger。只有一个level属性，应为已经被命名为"root".
    	level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。
    -->
    <root level="INFO">
        <appender-ref ref="FILE" />
        <appender-ref ref="STDOUT" />
    </root>

	<include resource="org/springframework/boot/logging/logback/base.xml" />
    <!-- 开发、测试环境 -->
    <springProfile name="dev,test">
        <logger name="org.springframework.web" level="DEBUG"/>
        <logger name="org.springboot.sample" level="DEBUG" />
        <logger name="com.bridgeintelligent.ercp" level="DEBUG" />
    </springProfile>

    <!-- 生产环境 -->
    <springProfile name="pro">
        <logger name="org.springframework.web" level="DEBUG"/>
        <logger name="org.springboot.sample" level="DEBUG" />
        <logger name="com.bridgeintelligent.ercp" level="DEBUG" />
    </springProfile>
</configuration>